{"ast":null,"code":"export function generatePhotoLocationMap() {\n  let gridSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 4;\n  const arr = Array.from({\n    length: gridSize ** 2\n  }, (_, i) => i); // const obj = {};\n\n  function generateRandomNumber() {\n    const randomNum = Math.floor(Math.random() * arr.length);\n    const numArray = arr.splice(randomNum, 1);\n    return numArray[0];\n  }\n\n  for (let i = 0; i < gridSize * 2; i++) {\n    const index1 = generateRandomNumber();\n    const index2 = generateRandomNumber();\n    arr[index1] = i;\n    arr[index2] = i;\n  }\n\n  console.log(arr);\n  return arr;\n}","map":{"version":3,"sources":["/Users/krungta/workspace/memory-game/src/utilities/shared.js"],"names":["generatePhotoLocationMap","gridSize","arr","Array","from","length","_","i","generateRandomNumber","randomNum","Math","floor","random","numArray","splice","index1","index2","console","log"],"mappings":"AAAA,OAAO,SAASA,wBAAT,GAAiD;AAAA,MAAdC,QAAc,uEAAH,CAAG;AACtD,QAAMC,GAAG,GAAGC,KAAK,CAACC,IAAN,CAAW;AAACC,IAAAA,MAAM,EAAEJ,QAAQ,IAAE;AAAnB,GAAX,EAAkC,CAACK,CAAD,EAAIC,CAAJ,KAAUA,CAA5C,CAAZ,CADsD,CAEtD;;AAEA,WAASC,oBAAT,GAAgC;AAC9B,UAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBV,GAAG,CAACG,MAA/B,CAAlB;AACA,UAAMQ,QAAQ,GAAGX,GAAG,CAACY,MAAJ,CAAWL,SAAX,EAAsB,CAAtB,CAAjB;AACA,WAAOI,QAAQ,CAAC,CAAD,CAAf;AACD;;AAED,OAAI,IAAIN,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGN,QAAQ,GAAG,CAA9B,EAAiCM,CAAC,EAAlC,EAAsC;AACpC,UAAMQ,MAAM,GAAGP,oBAAoB,EAAnC;AACA,UAAMQ,MAAM,GAAGR,oBAAoB,EAAnC;AAEAN,IAAAA,GAAG,CAACa,MAAD,CAAH,GAAcR,CAAd;AACAL,IAAAA,GAAG,CAACc,MAAD,CAAH,GAAcT,CAAd;AACD;;AAEDU,EAAAA,OAAO,CAACC,GAAR,CAAYhB,GAAZ;AACA,SAAOA,GAAP;AACD","sourcesContent":["export function generatePhotoLocationMap (gridSize = 4) {\n  const arr = Array.from({length: gridSize**2}, (_, i) => i);\n  // const obj = {};\n\n  function generateRandomNumber() {\n    const randomNum = Math.floor(Math.random() * arr.length);\n    const numArray = arr.splice(randomNum, 1);\n    return numArray[0];\n  }\n\n  for(let i = 0; i < gridSize * 2; i++) {\n    const index1 = generateRandomNumber();\n    const index2 = generateRandomNumber();\n\n    arr[index1] = i;\n    arr[index2] = i;\n  }\n\n  console.log(arr);\n  return arr;\n}\n\n"]},"metadata":{},"sourceType":"module"}